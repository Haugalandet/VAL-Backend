openapi: "3.0.3"
info:
  title: "val API"
  description: "val API"
  version: "1.0.0"
servers:
  - url: "https://val"
paths:
  /users:
    post:
      summary: "Create new user"
      operationId: "createUser"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
  /users/{id}:
    get:
      summary: "Get user information"
      operationId: "getUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    put:
      summary: "Change user"
      operationId: "updateUser"
      parameters:
        - name: "id"
          in: "path"
          required: false
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserDTO"
    delete:
      summary: "Delete user"
      operationId: "deleteUser"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
  /polls:
    get:
      summary: "Get polls of current user"
      operationId: "getAllPollsByCurrentUser"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PollDTO"
    post:
      summary: "Creat polls"
      operationId: "createPoll"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PollDTORequest"
        required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PollDTO"
  /polls/{poll-id}:
    get:
      summary: "Get poll"
      operationId: "getPoll"
      parameters:
        - name: "poll-id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PollDTO"
    delete:
      summary: "delete poll"
      operationId: "deletePoll"
      parameters:
        - name: "poll-id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PollDTO"
  /polls/{poll-id}/end:
    post:
      summary: "End poll"
      operationId: "endPoll"
      parameters:
        - name: "poll-id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PollDTO"
  /polls/{poll-id}/start:
    post:
      summary: "Start poll"
      operationId: "startPoll"
      parameters:
        - name: "poll-id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PollDTO"
  /polls/{poll-id}/votes:
    post:
      summary: "Vote in poll"
      operationId: "vote"
      parameters:
        - name: "poll-id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VoteDTO"
        required: true
      responses:
        "200":
          description: "OK"
  /polls/{id}/sse:
    get:
      summary: "Get live Poll (Server Sent Event)"
      operationId: "pollSse"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "OK"
          content:
            text/event-stream:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/PollDTO"
  /auth/login:
    post:
      summary: "Login (get auth token)"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDTO"
        required: true
      responses:
        "200":
          description: "OK"
          headers:
            Authorization:
              schema:
                type: string
                format: jwt
          content:
            '*/*':
              schema:
                type: "string"
  /auth/logout:
    post:
      summary: "Logout"
      operationId: "signOut"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /auth/refresh:
    post:
      summary: "Refresh token"
      operationId: "login"
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            format: jwt
          required: true
      responses:
        "200":
          description: "OK"
          headers:
            Authorization:
              schema:
                type: string
                format: jwt
          content:
            '*/*':
              schema:
                type: "string"
components:
  schemas:
    CreateUserDTO:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"
    UserDTO:
      type: "object"
      properties:
        userId:
          type: "integer"
        username:
          type: "string"
    ChoiceDTO:
      type: "object"
      properties:
        ChoiceId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        voteCount:
          type: "integer"
          format: "int64"
    ChoiceDTORequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
    VoteDTO:
      type: "object"
      properties:
        choiceId:
          type: "integer"
          format: "int64"
        voteCount:
          type: "integer"
          format: "int64"
    PollDTO:
      type: "object"
      properties:
        pollId:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        description:
          type: "string"
        needLogin:
          type: "boolean"
        status:
          type: "string"
          enum:
            - "NOT_INITIALISED"
            - "ACTIVE"
            - "ENDED"
        choices:
          type: "array"
          items:
            $ref: "#/components/schemas/ChoiceDTO"
    PollDTORequest:
      type: "object"
      properties:
        name:
          type: "string"
        description:
          type: "string"
        needLogin:
          type: "boolean"
        choices:
          type: "array"
          items:
            $ref: "#/components/schemas/ChoiceDTORequest"
    LoginDTO:
      type: "object"
      properties:
        username:
          type: "string"
        password:
          type: "string"